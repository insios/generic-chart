#==== Generic starter template (ported from helm starter chart)

app:
  name: nginx
  version: 1.27.2
  instance:
  partOf:
  environment:

components:
  main:
    componentName: ''
    resources:

#---- Deployment

      dep:
        resourceName: 'dep'
        manifest:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            $snippets:
              - snippetName: metadata
          spec:
            $replicas:
              $disabled: '{{ .Values.autoscaling.enabled }}'
              tplName: tplInt
              tplParam: '{{ .Values.replicaCount }}'
            selector:
              $matchLabels: 'selectorLabelsMap'
            template:
              metadata:
                $annotations: 'tplMap: "{{ .Values.podAnnotations }}"'
                $labels: 'resourceLabelsMap'
                $podLabels:
                  tplName: tplMap
                  tplParam: '{{ .Values.podLabels }}'
                  dstKey: 'labels'
              spec:
                $imagePullSecrets: 'tplLst: "{{ .Values.imagePullSecrets }}"'
                serviceAccountName: default
                $serviceAccountName:
                  $disabled: '{{ not .Values.serviceAccount.create }}'
                  tplName: fullResourceNameStr
                  tplParam: ["sa"]
                $securityContext: 'tplMap: "{{ .Values.podSecurityContext }}"'
                containers:
                  - $name: 'appNameStr'
                    $securityContext: 'tplMap: "{{ .Values.securityContext }}"'
                    $image: 'tplStr: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Values.app.version }}"'
                    $imagePullPolicy: 'tplStr: "{{ .Values.image.pullPolicy }}"'
                    ports:
                      - name: http
                        $containerPort: 'tplInt: "{{ .Values.service.port }}"'
                        protocol: TCP
                    $livenessProbe: 'tplMap: "{{ .Values.livenessProbe }}"'
                    $readinessProbe: 'tplMap: "{{ .Values.readinessProbe }}"'
                    $resources: 'tplMap: "{{ .Values.resources }}"'
                    $volumeMounts: 'tplLst: "{{ .Values.volumeMounts }}"'
                $volumes: 'tplLst: "{{ .Values.volumes }}"'
                $nodeSelector: 'tplMap: "{{ .Values.nodeSelector }}"'
                $affinity: 'tplMap: "{{ .Values.affinity }}"'
                $tolerations: 'tplLst: "{{ .Values.tolerations }}"'

#---- Service

      svc:
        resourceName: 'svc'
        manifest:
          apiVersion: v1
          kind: Service
          metadata:
            $snippets:
              - metadata
          spec:
            $type: 'tplStr: "{{ .Values.service.type }}"'
            ports:
              - $port: 'tplInt: "{{ .Values.service.port }}"'
                targetPort: http
                protocol: TCP
                name: http
            $selector: 'selectorLabelsMap: ["dep"]'

#---- Ingress

      ing:
        resourceName: 'ing'
        $disabled: '{{ not .Values.ingress.enabled }}'
        manifest:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            $snippets:
              - metadata
            $annotations: 'tplMap: "{{ .Values.ingress.annotations }}"'
          spec:
            $ingressClassName: 'tplStr: "{{ .Values.ingress.className }}"'
            $tls: 'tplLst: "{{ .Values.ingress.tls }}"'
            rules:
              - $host: 'tplStr: "{{ (first .Values.ingress.hosts).host }}"'
                http:
                  paths:
                    - $path: 'tplStr: "{{ (first (first .Values.ingress.hosts).paths).path }}"'
                      $pathType: 'tplStr: "{{ (first (first .Values.ingress.hosts).paths).pathType }}"'
                      backend:
                        service:
                          $name: 'fullResourceNameStr: ["svc"]'
                          port:
                            $number: 'tplInt: "{{ .Values.service.port }}"'

#---- HorizontalPodAutoscaler

      hpa:
        resourceName: 'hpa'
        $disabled: '{{ not .Values.autoscaling.enabled }}'
        manifest:
          apiVersion: autoscaling/v2
          kind: HorizontalPodAutoscaler
          metadata:
            $snippets:
              - metadata
          spec:
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              $name: 'fullResourceNameStr: ["dep"]'
            $minReplicas: 'tplInt: "{{ .Values.autoscaling.minReplicas }}"'
            $maxReplicas: 'tplInt: "{{ .Values.autoscaling.maxReplicas }}"'
            metrics:
              - $disabled: '{{ not .Values.autoscaling.targetCPUUtilizationPercentage }}'
                type: Resource
                resource:
                  name: cpu
                  target:
                    type: Utilization
                    $averageUtilization: 'tplInt: "{{ .Values.autoscaling.targetCPUUtilizationPercentage }}"'
              - $disabled: '{{ not .Values.autoscaling.targetMemoryUtilizationPercentage }}'
                type: Resource
                resource:
                  name: memory
                  target:
                    type: Utilization
                    averageUtilization: 'tplInt: "{{ .Values.autoscaling.targetMemoryUtilizationPercentage }}"'

#---- ServiceAccount

      sa:
        resourceName: 'sa'
        $disabled: '{{ not .Values.serviceAccount.create }}'
        manifest:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            $snippets:
              - metadata
            $annotations: 'tplMap: "{{ .Values.serviceAccount.annotations }}"'
          $automountServiceAccountToken: 'tplBln: "{{ .Values.serviceAccount.automount }}"'

#---- snippets

snippets:
  metadata:
    $name: 'fullResourceNameStr'
    $labels: 'resourceLabelsMap'

#==== Default values (copied from helm starter chart)

# Default values for starter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
